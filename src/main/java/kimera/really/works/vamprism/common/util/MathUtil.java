package kimera.really.works.vamprism.common.util;

public final class MathUtil
{
    private static final float[] sinLUT = {0.0F, 0.01755079694742901F, 0.03510159389485802F, 0.05265239084228703F, 0.07020318778971604F, 0.08775398473714505F, 0.10530478168457406F, 0.12285557863200308F, 0.14040637557943209F, 0.1579571725268611F, 0.1755079694742901F, 0.19305876642171912F, 0.21060956336914813F, 0.22816036031657713F, 0.24571115726400616F, 0.26326195421143517F, 0.28081275115886417F, 0.2983635481062932F, 0.3159143450537222F, 0.3334651420011512F, 0.3510159389485802F, 0.36856673589600925F, 0.38611753284343825F, 0.40366832979086725F, 0.42121912673829626F, 0.43876992368572526F, 0.45632072063315426F, 0.47387151758058327F, 0.4914223145280123F, 0.5089731114754413F, 0.5265239084228703F, 0.5440747053702993F, 0.5616255023177283F, 0.5791762992651573F, 0.5967270962125863F, 0.6142778931600154F, 0.6318286901074444F, 0.6493794870548734F, 0.6669302840023024F, 0.6844810809497314F, 0.7020318778971604F, 0.7195826748445895F, 0.7371334717920185F, 0.7546842687394475F, 0.7722350656868765F, 0.7897858626343055F, 0.8073366595817345F, 0.8248874565291635F, 0.8424382534765925F, 0.8599890504240215F, 0.8775398473714505F, 0.8950906443188795F, 0.9126414412663085F, 0.9301922382137375F, 0.9477430351611665F, 0.9652938321085955F, 0.9828446290560247F, 1.0003954260034535F, 1.0179462229508827F, 1.0354970198983116F, 1.0530478168457407F, 1.0705986137931696F, 1.0881494107405987F, 1.1057002076880276F, 1.1232510046354567F, 1.1408018015828858F, 1.1583525985303147F, 1.1759033954777438F, 1.1934541924251727F, 1.2110049893726018F, 1.2285557863200307F, 1.2461065832674598F, 1.2636573802148887F, 1.2812081771623178F, 1.2987589741097467F, 1.3163097710571758F, 1.3338605680046047F, 1.3514113649520338F, 1.3689621618994627F, 1.3865129588468919F, 1.4040637557943207F, 1.4216145527417499F, 1.439165349689179F, 1.4567161466366079F, 1.474266943584037F, 1.4918177405314659F, 1.509368537478895F, 1.5269193344263239F, 1.544470131373753F, 1.562020928321182F, 1.579571725268611F, 1.59712252221604F, 1.614673319163469F, 1.632224116110898F, 1.649774913058327F, 1.667325710005756F, 1.684876506953185F, 1.7024273039006141F, 1.719978100848043F, 1.7375288977954721F, 1.755079694742901F, 1.7726304916903302F, 1.790181288637759F, 1.8077320855851882F, 1.825282882532617F, 1.8428336794800462F, 1.860384476427475F, 1.8779352733749042F, 1.895486070322333F, 1.9130368672697622F, 1.930587664217191F, 1.9481384611646202F, 1.9656892581120493F, 1.9832400550594782F, 2.000790852006907F, 2.0183416489543364F, 2.0358924459017653F, 2.053443242849194F, 2.070994039796623F, 2.0885448367440524F, 2.1060956336914813F, 2.1236464306389102F, 2.141197227586339F, 2.1587480245337685F, 2.1762988214811974F, 2.1938496184286262F, 2.211400415376055F, 2.2289512123234845F, 2.2465020092709134F, 2.2640528062183423F, 2.2816036031657716F, 2.2991544001132005F, 2.3167051970606294F, 2.3342559940080583F, 2.3518067909554876F, 2.3693575879029165F, 2.3869083848503454F, 2.4044591817977743F, 2.4220099787452036F, 2.4395607756926325F, 2.4571115726400614F, 2.4746623695874903F, 2.4922131665349196F, 2.5097639634823485F, 2.5273147604297774F, 2.5448655573772068F, 2.5624163543246357F, 2.5799671512720646F, 2.5975179482194934F, 2.615068745166923F, 2.6326195421143517F, 2.6501703390617806F, 2.6677211360092095F, 2.685271932956639F, 2.7028227299040677F, 2.7203735268514966F, 2.7379243237989255F, 2.755475120746355F, 2.7730259176937837F, 2.7905767146412126F, 2.8081275115886415F, 2.825678308536071F, 2.8432291054834997F, 2.8607799024309286F, 2.878330699378358F, 2.895881496325787F, 2.9134322932732157F, 2.9309830902206446F, 2.948533887168074F, 2.966084684115503F, 2.9836354810629317F, 3.0011862780103606F, 3.01873707495779F, 3.036287871905219F, 3.0538386688526478F, 3.0713894658000767F, 3.088940262747506F, 3.106491059694935F, 3.124041856642364F, 3.141592653589793F};
    private static final int sinLUTAccuracy = 360 / sinLUT.length;

    public static final float sinDeg(int degrees)
    {
        return sinLUT[(degrees / sinLUTAccuracy) % 360];
    }

    public static final float sin(float radians)
    {
        return sinDeg((int) rad2Deg(radians));
    }

    public static final float cosDeg(int degrees)
    {
        return sinDeg(degrees + 90);
    }

    public static final float cos(float radians)
    {
        return sin(radians + (PI / 2));
    }

    public static final float PI = (float) Math.PI;

    public static final double deg2Rad(double degrees)
    {
        return (degrees / 360) * (Math.PI * 2);
    }

    public static final float deg2Rad(float degrees)
    {
        return (degrees / 360) * (PI * 2);
    }

    public static final double rad2Deg(double radians)
    {
        return (radians / (Math.PI * 2)) * 360;
    }

    public static final float rad2Deg(float radians)
    {
        return (radians / (PI * 2)) * 360;
    }
}
